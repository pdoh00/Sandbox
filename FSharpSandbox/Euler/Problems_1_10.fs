namespace ProjectEuler
open System

module Problems_1_10 =

  //Multiples of 3 and 5
  //Problem 1
  //If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
  //Find the sum of all the multiples of 3 or 5 below 1000.
  
  let problem1 n= 
    [1..n]
    |> List.filter (fun x -> x%3=0 || x%5=0)
    |> List.sum
  
  //Even Fibonacci numbers
  //Problem 2
  //Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
  //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  //By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
  
  let problem2 n =
    let rec fib a b max =
      if a + b < max then
        let current = a + b
        let rest = fib b current max 
        current :: rest
      else 
        []
  
    1::2::(fib 1 2 n)
    |> Seq.filter (fun x -> x%2=0)
    |> Seq.sum
  
  
  //Largest prime factor
  //Problem 3
  //The prime factors of 13195 are 5, 7, 13 and 29.
  //What is the largest prime factor of the number 600851475143 ?
  
  //http://en.wikipedia.org/wiki/Quadratic_sieve
  let quadraticSieve (x:int64) = 
    
    let sqrt_int n = 
      n |> float |> sqrt |> int64

    let i = Math.Sqrt(x |> float)|>int64

    let theRoot = sqrt_int x

    theRoot

  //  let problem3 =
  //    let aryInit = [|for i in 2L..13195L do yield (i,true)|]
  //    
  //    let x, y = 
  //      aryInit
  //      |> List.unzip
    
      //let p = 2L
      
  //    let testList, _ = 
  //      aryInit
  //      |> List.unzip
  //    testList
  
    
  
  //try 2 - still takes way too long
  //    let IsPrimeMultipleTest (n:int64) (x:int64) =
  //      x = n || x % n <> 0L
  //
  //    let rec RemoveAllMultiples (listN:list<int64>) (listX:list<int64>) = 
  //      match listN with
  //      | head::tail -> RemoveAllMultiples tail (List.filter (IsPrimeMultipleTest head) listX)
  //      | [] -> listX
  //
  //    let GetPrimesUpTo (n:int64) =
  //      let max = int64 (sqrt(float n))
  //      RemoveAllMultiples [2L..max] [2L..n]
  //    
  //    let primeFactors n =
  //      GetPrimesUpTo (n-1L)
  //      |> Seq.filter (fun x-> n % x= 0L)
  //
  //    primeFactors 131951122L
  
  //try 1 - takes way too long
  //    let rec filterRec p (data:list<int64>) =
  //        let nextPList = 
  //          data
  //          |> Seq.filter (fun x-> x > p)
  //          |> Seq.toList
  //        
  //        let nextP =
  //          if List.isEmpty nextPList then
  //            p
  //          else
  //            nextPList.Head
  //
  //        if p < nextP then
  //          let primes, rest = 
  //            data
  //            |> List.partition (fun x-> x<=p)
  //            
  //          let current = 
  //            rest 
  //            |> List.filter (fun x -> not(x % p = 0L))
  //
  //          filterRec current.Head primes@current
  //        else
  //          data
  //   
  //    let filterPrimes (data:list<int64>) =
  //      let result = filterRec 2L data
  //      result
  //
  //    let sieveOfEratosthenes (n:int64) = 
  //      printf "Running sieveOfEratosthenes\n"
  //
  //      let primes = 
  //        //let allNums = [2L..n]
  //        let oddNumsToN = [for i in 3L..n do if not(i % 2L = 0L) then yield i ]
  //        printf "allNums filled -> filtering primes\n"
  //        oddNumsToN
  //        |> filterPrimes
  //      printf "primes filtered\n"
  //      primes
  //
  //    let primeFactors n =
  //      sieveOfEratosthenes (n-1L)
  //      |> Seq.filter (fun x-> n % x= 0L)
  //
  //    primeFactors 131951212L
  //    |> Seq.max
  
      
  //Largest palindrome product
  //Problem 4
  //A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
  //Find the largest palindrome made from the product of two 3-digit numbers.
  let problem4 =
    let isPalindrome (n:int) =
      let toStr x =
        x.ToString()
      let rev (s:string) =
        new String(Array.rev(s.ToCharArray()))
      let toInt (y:string) =
        Int32.Parse(y)
      let revNum = n|> toStr |> rev |> toInt
      n=revNum

    let allProducts = [for i in 100..999 do
                         for j in 100..999 do
                           yield i*j]
    let answer = 
      allProducts
      |> List.filter (fun x -> isPalindrome x)
      |> List.max

    answer
      
  //Smallest multiple
  //Problem 5
  //2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
  //What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
  
  //pre-conditions I am thinking of
  //must be at least 20
  //must be even
  let problem5 n =
    let sw = new System.Diagnostics.Stopwatch()
    sw.Start()

    let evens = 
      Seq.initInfinite (fun x -> x + n) 
      |> Seq.filter (fun y -> y % 2 = 0)

    printf "Evens created in %d ms\n" sw.ElapsedMilliseconds

    let div = [1..n]
        
    //the following implementation is very ineffecient
    //it too 3007553ms to complete for n = 20.
    //I would like to try asynch map/reduce in the future,
    //bet think it could still be faster even synchronous.
    let canBeEvenlyDivided (value:int) (divisors:seq<int>)=
      divisors 
      |> Seq.map(fun x -> value % x = 0) 
      |> Seq.reduce (fun acc x -> acc && x)

    sw.Restart()
    let smallest =
      evens
      |> Seq.tryFind(fun z -> canBeEvenlyDivided z div)

    printf "Smallest determined in %d ms\n" sw.ElapsedMilliseconds

    smallest

  //Sum square difference
  //Problem 6
  //The sum of the squares of the first ten natural numbers is,
  //12 + 22 + ... + 102 = 385
  //The square of the sum of the first ten natural numbers is,
  //(1 + 2 + ... + 10)2 = 552 = 3025
  //Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
  //Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
  
  let problem6 n =
    let first100NaturalNumbers = [1..n]
  
    let sumOfSquares = 
      first100NaturalNumbers
      |> Seq.map(fun x -> x*x)
      |> Seq.sum
  
    let sum =
      first100NaturalNumbers
      |> Seq.sum
  
    let squareOfSums = sum*sum   
  
    let answer = squareOfSums - sumOfSquares
  
    answer
  
  //10001st prime
  //Problem 7
  //By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
  //What is the 10001st prime number?
  
  
  
  //Largest product in a series
  //Problem 8
  //Find the greatest product of five consecutive digits in the 1000-digit number.
  //
  //73167176531330624919225119674426574742355349194934
  //96983520312774506326239578318016984801869478851843
  //85861560789112949495459501737958331952853208805511
  //12540698747158523863050715693290963295227443043557
  //66896648950445244523161731856403098711121722383113
  //62229893423380308135336276614282806444486645238749
  //30358907296290491560440772390713810515859307960866
  //70172427121883998797908792274921901699720888093776
  //65727333001053367881220235421809751254540594752243
  //52584907711670556013604839586446706324415722155397
  //53697817977846174064955149290862569321978468622482
  //83972241375657056057490261407972968652414535100474
  //82166370484403199890008895243450658541227588666881
  //16427171479924442928230863465674813919123162824586
  //17866458359124566529476545682848912883142607690042
  //24219022671055626321111109370544217506941658960408
  //07198403850962455444362981230987879927244284909188
  //84580156166097919133875499200524063689912560717606
  //05886116467109405077541002256983155200055935729725
  //71636269561882670428252483600823257530420752963450
  
  let problem8 =
    let theBigNumber = "73167176531330624919225119674426574742355349194934\
                        96983520312774506326239578318016984801869478851843\
                        85861560789112949495459501737958331952853208805511\
                        12540698747158523863050715693290963295227443043557\
                        66896648950445244523161731856403098711121722383113\
                        62229893423380308135336276614282806444486645238749\
                        30358907296290491560440772390713810515859307960866\
                        70172427121883998797908792274921901699720888093776\
                        65727333001053367881220235421809751254540594752243\
                        52584907711670556013604839586446706324415722155397\
                        53697817977846174064955149290862569321978468622482\
                        83972241375657056057490261407972968652414535100474\
                        82166370484403199890008895243450658541227588666881\
                        16427171479924442928230863465674813919123162824586\
                        17866458359124566529476545682848912883142607690042\
                        24219022671055626321111109370544217506941658960408\
                        07198403850962455444362981230987879927244284909188\
                        84580156166097919133875499200524063689912560717606\
                        05886116467109405077541002256983155200055935729725\
                        71636269561882670428252483600823257530420752963450"
    
    let allProds = [for i in 0..theBigNumber.Length/2 do 
                                yield theBigNumber
                                |> Seq.skip i
                                |> Seq.take 5
                                |> Seq.map (string >> int)
                                |> Seq.fold (fun acc elem -> acc * elem) 1]
  
    let answer =
      allProds
      |> Seq.max
  
    answer      
      
  
  //Special Pythagorean triplet
  //Problem 9
  //A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
  //a2 + b2 = c2
  //For example, 32 + 42 = 9 + 16 = 25 = 52.
  //There exists exactly one Pythagorean triplet for which a + b + c = 1000.
  //Find the product abc.
  
  
  //Summation of primes
  //Problem 10
  //The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
  //Find the sum of all the primes below two million.
  
  let problem10 n =
    let IsPrimeMultipleTest (n:int64) (x:int64) =
        x = n || x % n <> 0L
  
    let rec RemoveAllMultiples (listN:list<int64>) (listX:list<int64>) = 
      match listN with
      | head::tail -> RemoveAllMultiples tail (List.filter (IsPrimeMultipleTest head) listX)
      | [] -> listX
  
    let GetPrimesUpTo (n:int64) =
      let max = int64 (sqrt(float n))
      RemoveAllMultiples [2L..max] [2L..n]
  
    GetPrimesUpTo n
    |> Seq.sum
